<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WesleyCh3n</title><link>https://wesleych3n.github.io/</link><description>Recent content on WesleyCh3n</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Wed, 22 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://wesleych3n.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>React + Tailwind + Typescript</title><link>https://wesleych3n.github.io/posts/react-tailwind-ts/</link><pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate><guid>https://wesleych3n.github.io/posts/react-tailwind-ts/</guid><description>Create React Typescript Project yarn create react-app ./ --template typescript Install Tailwind in devDependency yarn add -D tailwindcss postcss autoprefixer # yarn add -D tailwindcss@npm:@tailwindcss/postcss7-compat postcss@^7 autoprefixer@^9 Install CRACO - No Need Anymore (skip) yarn add @craco/craco package.json
&amp;#34;scripts&amp;#34;: { &amp;#34;start&amp;#34;: &amp;#34;craco start&amp;#34;, &amp;#34;build&amp;#34;: &amp;#34;craco build&amp;#34;, &amp;#34;test&amp;#34;: &amp;#34;craco test&amp;#34;, &amp;#34;eject&amp;#34;: &amp;#34;react-scripts eject&amp;#34; }, craco.config.js
module.exports = { style: { postcss: { plugins: [require(&amp;#34;tailwindcss&amp;#34;), require(&amp;#34;autoprefixer&amp;#34;)], }, }, }; Generate tailwind.</description></item><item><title>My First Post</title><link>https://wesleych3n.github.io/posts/my-first-post/</link><pubDate>Sat, 18 Dec 2021 09:25:45 +0800</pubDate><guid>https://wesleych3n.github.io/posts/my-first-post/</guid><description>Hello world!!</description></item><item><title>WSL Matplotlib Plot GUI</title><link>https://wesleych3n.github.io/posts/2021-10-19-wsl-matplotlib/</link><pubDate>Tue, 19 Oct 2021 00:00:00 +0000</pubDate><guid>https://wesleych3n.github.io/posts/2021-10-19-wsl-matplotlib/</guid><description>TL;DR
Install VcXsrv.
Install PyQT
Add following to shellrc
export DISPLAY=`grep -oP &amp;#34;(?&amp;lt;=nameserver ).+&amp;#34; /etc/resolv.conf`:0.0 Open win firewall by: Windows Security -&amp;gt; Firewall &amp;amp; network protection -&amp;gt; Allow an app through firewall -&amp;gt; make sure VcXsrv has both public and private checked. (When Launching xlaunch first time, you might get a prompt to allow through firewall.
Launch XLaunch with &amp;ldquo;Disable access control&amp;rdquo; ticked</description></item><item><title>npm global installed path config</title><link>https://wesleych3n.github.io/posts/2021-10-18-npm-config/</link><pubDate>Mon, 18 Oct 2021 00:00:00 +0000</pubDate><guid>https://wesleych3n.github.io/posts/2021-10-18-npm-config/</guid><description>In order to fix Error: EACCES: permission denied, access '/usr/lib/node_modules', a solution will be set installed path non-root. Here&amp;rsquo;s how to set it.
mkdir ~/.npm-global npm config set prefix &amp;#39;~/.npm-global&amp;#39; This can see if config set properly
npm config list Output will be like this
; cli configs metrics-registry = &amp;#34;https://registry.npmjs.org/&amp;#34; scope = &amp;#34;&amp;#34; user-agent = &amp;#34;npm/6.14.15 node/v14.18.1 linux x64&amp;#34; ; userconfig /home/wesley/.npmrc prefix = &amp;#34;/home/wesley/.npm-global&amp;#34; ; node bin location = /usr/local/bin/node ; cwd = /mnt/c/Users/Wesley/GitHub/wesleych3n.</description></item><item><title>Name Export vs Default Export</title><link>https://wesleych3n.github.io/posts/2021-10-15-js-name-export-vs-default-export/</link><pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate><guid>https://wesleych3n.github.io/posts/2021-10-15-js-name-export-vs-default-export/</guid><description>Name Export vs Default Export Name Export Export export const Hello = () =&amp;gt; { return &amp;lt;h1&amp;gt;Hello&amp;lt;/h1&amp;gt;; } export const Goodbye = () =&amp;gt; { return &amp;lt;h1&amp;gt;Goodbye&amp;lt;/h1&amp;gt;; } We can export multiple components from a single file.
Import import { Hello, Goodbye } from &amp;#34;./Greetings&amp;#34; // or import * as Greetings from &amp;#34;./Greetings&amp;#34; &amp;lt;Greetings.Hello /&amp;gt; Default Export Export const Hello = () =&amp;gt; { return &amp;lt;h1&amp;gt;Hello&amp;lt;/h1&amp;gt;; } export default Hello; only export one component per file;</description></item><item><title>SSH X server on Windows</title><link>https://wesleych3n.github.io/posts/2021-10-14-window-x-server/</link><pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate><guid>https://wesleych3n.github.io/posts/2021-10-14-window-x-server/</guid><description>Installation Install VcXsrv scoop install vcxsrv Setup xLauncher xlaunch.exe ![xlaunch-1]({{ site.url }}{{ site.baseurl }}/assets/images/xlauch-1.jpg){: .align-center} ![xlaunch-1]({{ site.url }}{{ site.baseurl }}/assets/images/xlauch-2.jpg){: .align-center} ![xlaunch-1]({{ site.url }}{{ site.baseurl }}/assets/images/xlauch-3.jpg){: .align-center} ![xlaunch-1]({{ site.url }}{{ site.baseurl }}/assets/images/xlauch-4.jpg){: .align-center}
Add env variable to PowerShell PROFILE # vi $PROFILE, and add below line $env:DISPLAY=&amp;#39;localhost:0.0&amp;#39; Test out and finish! ssh -Y server xclock</description></item><item><title>My Bash/Zsh-like PowerShell Journey</title><link>https://wesleych3n.github.io/posts/2021-10-14-my-powershell/</link><pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate><guid>https://wesleych3n.github.io/posts/2021-10-14-my-powershell/</guid><description>TL;DR
This is a note that I found out Microsoft PowerShell can act like Bash/Zsh which I much familiar with. Because of the work, pretty much whole operating system move to windows. It is so much pain to work without using any shell. The main reason is that I so much used to use (neo)vim as my code editor. But luckily (neo)vim built for windows (phew~). Ok, back to the title, this is a step by step note that I dig into PowerShell and Windows.</description></item><item><title>ReactJs Learning Note</title><link>https://wesleych3n.github.io/posts/2021-10-13-reactjs/</link><pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate><guid>https://wesleych3n.github.io/posts/2021-10-13-reactjs/</guid><description>React is component-based
Create react component class. Use ReactDOM.render() refresh html
ReactDOM.render(element, container[, callback])
JSX component lifecycle</description></item><item><title>#2021-10-14.work.log</title><link>https://wesleych3n.github.io/posts/2021-10-12-work/</link><pubDate>Tue, 12 Oct 2021 00:00:00 +0000</pubDate><guid>https://wesleych3n.github.io/posts/2021-10-12-work/</guid><description> Install scoop (best thing ever seen in win10 so far, maybe try chocolatey future) git, nodejs, python, neovim, neovide, lazygit maybe understood dll search order Create basic electron app Use electron-builder package electron app msvs x64 for powershell!! I think I need to start learning UI framewor&amp;hellip; want to update my log with my github.io Reference DLL search on windows dll search order electron-builder 用 electron-builder 打包應用程式給其他人 Building desktop applications with Electron - electron-builder x64 Developer PowerShell for VS 2019</description></item><item><title>JavaScript Learning Note</title><link>https://wesleych3n.github.io/posts/2021-10-13-post-js-road/</link><pubDate>Tue, 12 Oct 2021 00:00:00 +0000</pubDate><guid>https://wesleych3n.github.io/posts/2021-10-13-post-js-road/</guid><description>JavaScript Note 5 type Undefined Null String Boolen Number Others r Object 3 way create Object Object literal var a = { name:&amp;#39;Wesley&amp;#39;, score: 100 }; new operator var a = new Date Constructor function function Student(name, score){ this.name = name this.score = score } var a = new Student(&amp;#39;Wesley&amp;#39;, 100); Primitive variable assignment makes a &amp;ldquo;copy&amp;rdquo; Object variable assignment pass the &amp;ldquo;reference&amp;rdquo; Function can be anonymous // recommended var add = function(a, b) { return a + b; }; Return a function var f = function(s) { return s?</description></item><item><title>About</title><link>https://wesleych3n.github.io/about/</link><pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate><guid>https://wesleych3n.github.io/about/</guid><description>Hugo is the world’s fastest framework for building websites. It is written in Go.
It makes use of a variety of open source projects including:
https://github.com/russross/blackfriday https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper Learn more and contribute on GitHub.</description></item></channel></rss>