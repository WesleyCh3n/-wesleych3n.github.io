[{"content":"TL;DR\nInstall VcXsrv.\nInstall PyQT\nAdd following to shellrc\n1 export DISPLAY=`grep -oP \u0026#34;(?\u0026lt;=nameserver ).+\u0026#34; /etc/resolv.conf`:0.0 Open win firewall by: Windows Security -\u0026gt; Firewall \u0026amp; network protection -\u0026gt; Allow an app through firewall -\u0026gt; make sure VcXsrv has both public and private checked. (When Launching xlaunch first time, you might get a prompt to allow through firewall.\nLaunch XLaunch with \u0026ldquo;Disable access control\u0026rdquo; ticked\nReference Show matplotlib plots (and other GUI) in Ubuntu (WSL1 \u0026amp; WSL2) ","permalink":"https://wesleych3n.github.io/posts/0007-wsl-matplotlib/","summary":"TL;DR\nInstall VcXsrv.\nInstall PyQT\nAdd following to shellrc\n1 export DISPLAY=`grep -oP \u0026#34;(?\u0026lt;=nameserver ).+\u0026#34; /etc/resolv.conf`:0.0 Open win firewall by: Windows Security -\u0026gt; Firewall \u0026amp; network protection -\u0026gt; Allow an app through firewall -\u0026gt; make sure VcXsrv has both public and private checked. (When Launching xlaunch first time, you might get a prompt to allow through firewall.\nLaunch XLaunch with \u0026ldquo;Disable access control\u0026rdquo; ticked\nReference Show matplotlib plots (and other GUI) in Ubuntu (WSL1 \u0026amp; WSL2) ","title":"WSL Matplotlib Plot GUI"},{"content":"In order to fix Error: EACCES: permission denied, access '/usr/lib/node_modules', a solution will be set installed path non-root. Here\u0026rsquo;s how to set it.\n1 2 mkdir ~/.npm-global npm config set prefix \u0026#39;~/.npm-global\u0026#39; This can see if config set properly\n1 npm config list Output will be like this\n1 2 3 4 5 6 7 8 9 10 11 12 ; cli configs metrics-registry = \u0026#34;https://registry.npmjs.org/\u0026#34; scope = \u0026#34;\u0026#34; user-agent = \u0026#34;npm/6.14.15 node/v14.18.1 linux x64\u0026#34; ; userconfig /home/wesley/.npmrc prefix = \u0026#34;/home/wesley/.npm-global\u0026#34; ; node bin location = /usr/local/bin/node ; cwd = /mnt/c/Users/Wesley/GitHub/wesleych3n.github.io/_posts ; HOME = /home/wesley ; \u0026#34;npm config ls -l\u0026#34; to show all defaults. Add bin path to $PATH variable\n1 2 3 if [ -d $HOME/.npm-global ]; then export PATH=$HOME/.npm-global/bin:$PATH fi ","permalink":"https://wesleych3n.github.io/posts/0006-npm-config/","summary":"In order to fix Error: EACCES: permission denied, access '/usr/lib/node_modules', a solution will be set installed path non-root. Here\u0026rsquo;s how to set it.\n1 2 mkdir ~/.npm-global npm config set prefix \u0026#39;~/.npm-global\u0026#39; This can see if config set properly\n1 npm config list Output will be like this\n1 2 3 4 5 6 7 8 9 10 11 12 ; cli configs metrics-registry = \u0026#34;https://registry.npmjs.org/\u0026#34; scope = \u0026#34;\u0026#34; user-agent = \u0026#34;npm/6.","title":"npm global installed path config"},{"content":"Name Export Export 1 2 3 4 5 6 7 export const Hello = () =\u0026gt; { return \u0026lt;h1\u0026gt;Hello\u0026lt;/h1\u0026gt;; } export const Goodbye = () =\u0026gt; { return \u0026lt;h1\u0026gt;Goodbye\u0026lt;/h1\u0026gt;; } We can export multiple components from a single file.\nImport 1 2 3 4 import { Hello, Goodbye } from \u0026#34;./Greetings\u0026#34; // or import * as Greetings from \u0026#34;./Greetings\u0026#34; \u0026lt;Greetings.Hello /\u0026gt; Default Export Export 1 2 3 4 5 const Hello = () =\u0026gt; { return \u0026lt;h1\u0026gt;Hello\u0026lt;/h1\u0026gt;; } export default Hello; only export one component per file;\nIf you want multiple functions in a file\n1 2 3 4 const fn1 = () =\u0026gt; {} const fn2 = () =\u0026gt; {} export default { fn1, fn2 } Import Single functions\n1 import Hello from \u0026#34;./Hello\u0026#34; Multiple functions\n1 2 3 4 import Fns from \u0026#34;./functions\u0026#34; Fns.fn1(); Fns.fn2(); TL;DR Default is better to prevent same function name in different file.\n1 2 3 4 5 6 7 8 9 10 11 import EN from \u0026#39;./EnGreetings\u0026#39;; import TW from \u0026#39;./TwGreetings\u0026#39;; const render = () =\u0026gt; { return ( \u0026lt;div\u0026gt; \u0026lt;EN.Hello /\u0026gt; \u0026lt;TW.Hello /\u0026gt; \u0026lt;/div\u0026gt; ) } ","permalink":"https://wesleych3n.github.io/posts/0005-js-name-export-vs-default-export/","summary":"Name Export Export 1 2 3 4 5 6 7 export const Hello = () =\u0026gt; { return \u0026lt;h1\u0026gt;Hello\u0026lt;/h1\u0026gt;; } export const Goodbye = () =\u0026gt; { return \u0026lt;h1\u0026gt;Goodbye\u0026lt;/h1\u0026gt;; } We can export multiple components from a single file.\nImport 1 2 3 4 import { Hello, Goodbye } from \u0026#34;./Greetings\u0026#34; // or import * as Greetings from \u0026#34;./Greetings\u0026#34; \u0026lt;Greetings.Hello /\u0026gt; Default Export Export 1 2 3 4 5 const Hello = () =\u0026gt; { return \u0026lt;h1\u0026gt;Hello\u0026lt;/h1\u0026gt;; } export default Hello; only export one component per file;","title":"Name Export vs Default Export"},{"content":"Installation Install VcXsrv 1 scoop install vcxsrv Setup xLauncher 1 xlaunch.exe config.launch\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;XLaunch WindowMode=\u0026#34;MultiWindow\u0026#34; ClientMode=\u0026#34;NoClient\u0026#34; LocalClient=\u0026#34;False\u0026#34; Display=\u0026#34;-1\u0026#34; LocalProgram=\u0026#34;xcalc\u0026#34; RemoteProgram=\u0026#34;xterm\u0026#34; RemotePassword=\u0026#34;\u0026#34; PrivateKey=\u0026#34;\u0026#34; RemoteHost=\u0026#34;\u0026#34; RemoteUser=\u0026#34;\u0026#34; XDMCPHost=\u0026#34;\u0026#34; XDMCPBroadcast=\u0026#34;False\u0026#34; XDMCPIndirect=\u0026#34;False\u0026#34; Clipboard=\u0026#34;True\u0026#34; ClipboardPrimary=\u0026#34;True\u0026#34; ExtraParams=\u0026#34;-ac -nowgl\u0026#34; Wgl=\u0026#34;True\u0026#34; DisableAC=\u0026#34;False\u0026#34; XDMCPTerminate=\u0026#34;False\u0026#34; /\u0026gt; Add env variable to PowerShell PROFILE 1 2 # vi $PROFILE, and add below line $env:DISPLAY=\u0026#39;localhost:0.0\u0026#39; Test out and finish! 1 ssh -Y server 1 xclock ","permalink":"https://wesleych3n.github.io/posts/0004-window-x-server/","summary":"Installation Install VcXsrv 1 scoop install vcxsrv Setup xLauncher 1 xlaunch.exe config.launch\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;XLaunch WindowMode=\u0026#34;MultiWindow\u0026#34; ClientMode=\u0026#34;NoClient\u0026#34; LocalClient=\u0026#34;False\u0026#34; Display=\u0026#34;-1\u0026#34; LocalProgram=\u0026#34;xcalc\u0026#34; RemoteProgram=\u0026#34;xterm\u0026#34; RemotePassword=\u0026#34;\u0026#34; PrivateKey=\u0026#34;\u0026#34; RemoteHost=\u0026#34;\u0026#34; RemoteUser=\u0026#34;\u0026#34; XDMCPHost=\u0026#34;\u0026#34; XDMCPBroadcast=\u0026#34;False\u0026#34; XDMCPIndirect=\u0026#34;False\u0026#34; Clipboard=\u0026#34;True\u0026#34; ClipboardPrimary=\u0026#34;True\u0026#34; ExtraParams=\u0026#34;-ac -nowgl\u0026#34; Wgl=\u0026#34;True\u0026#34; DisableAC=\u0026#34;False\u0026#34; XDMCPTerminate=\u0026#34;False\u0026#34; /\u0026gt; Add env variable to PowerShell PROFILE 1 2 # vi $PROFILE, and add below line $env:DISPLAY=\u0026#39;localhost:0.","title":"SSH X server on Windows"},{"content":"TL;DR\nThis is a note that I found out Microsoft PowerShell can act like Bash/Zsh which I much familiar with. Because of the work, pretty much whole operating system move to windows. It is so much pain to work without using any shell. The main reason is that I so much used to use (neo)vim as my code editor. But luckily (neo)vim built for windows (phew~). Ok, back to the title, this is a step by step note that I dig into PowerShell and Windows.\nCreate $PROFILE for PowerShell if not exist (like .bashrc or .zshrc)\nTest if Profile exist 1 Test-Path $PROFILE ❗If return is false meaning there is NO profile found then jump to step 2. ❗If return is true meaning there IS profile found then jump to step 3.\nCreate Profile 1 New-Item -Type File -Force $PROFILE ⚠ (Caution) these will erase the exist profile with new empty one.\nVarify Profile path 1 echo $PROFILE It normally locate in ~/Documents/WindowsPowerShell/Microsoft.PowerShell_profile.ps1\nInstall oh-my-posh Theme like powerlevel10k\nInstallation\n1 Install-Module oh-my-posh -Scope CurrentUser List all themes and remember the name of theme you like\n1 Get-PoshThemes -list Add theme to Profile\n1 Set-PoshPrompt -Theme \u0026lt;Theme name\u0026gt; Personally I use honukai for the simplicity.\nSource the Profile or restart the Terminal to take effect. 1 . $PROFILE Install Autosuggestion\nInstallation\n1 Install-Module PSReadLine Add the following configurations\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # autocompletion Import-Module PSReadLine Set-PSReadLineOption -PredictionSource History Set-PSReadLineKeyHandler -Chord Shift+Tab -Function AcceptSuggestion # Accept Suggestion # Autocompletion for arrow keys Set-PSReadlineKeyHandler -Key Tab -Function MenuComplete # Iterate through autocompletion Set-PSReadlineKeyHandler -Key UpArrow -Function HistorySearchBackward Set-PSReadlineKeyHandler -Key DownArrow -Function HistorySearchForward # Bash like movement Set-PSReadlineKeyHandler -Chord ctrl+d -Function ViExit Set-PSReadlineKeyHandler -Chord ctrl+w -Function BackwardDeleteWord Set-PSReadlineKeyHandler -Chord ctrl+e -Function EndOfLine Set-PSReadlineKeyHandler -Chord ctrl+a -Function BeginningOfLine Tab Completion Ref\n","permalink":"https://wesleych3n.github.io/posts/0003-my-powershell/","summary":"TL;DR\nThis is a note that I found out Microsoft PowerShell can act like Bash/Zsh which I much familiar with. Because of the work, pretty much whole operating system move to windows. It is so much pain to work without using any shell. The main reason is that I so much used to use (neo)vim as my code editor. But luckily (neo)vim built for windows (phew~). Ok, back to the title, this is a step by step note that I dig into PowerShell and Windows.","title":"My Bash/Zsh-like PowerShell Journey"},{"content":"React is component-based\nCreate react component class. Use ReactDOM.render() refresh html\nReactDOM.render(element, container[, callback])\nJSX component lifecycle ","permalink":"https://wesleych3n.github.io/posts/0002-reactjs/","summary":"React is component-based\nCreate react component class. Use ReactDOM.render() refresh html\nReactDOM.render(element, container[, callback])\nJSX component lifecycle ","title":"ReactJs Learning Note"},{"content":"JavaScript Note 5 type Undefined Null String Boolen Number Others r Object 3 way create Object Object literal 1 var a = { name:\u0026#39;Wesley\u0026#39;, score: 100 }; new operator 1 var a = new Date Constructor function 1 2 3 4 5 function Student(name, score){ this.name = name this.score = score } var a = new Student(\u0026#39;Wesley\u0026#39;, 100); Primitive variable assignment makes a \u0026ldquo;copy\u0026rdquo; Object variable assignment pass the \u0026ldquo;reference\u0026rdquo; Function can be anonymous // recommended 1 var add = function(a, b) { return a + b; }; Return a function 1 2 3 4 5 6 7 var f = function(s) { return s? function(a,b) { return a+b; }: function(a,b) { return a-b; } }; var f1 = f(true); f1(3,5); var f2 = f(false); f2(3,5); When a function is used only once, we can declare it anonymously and evoke it immediately 1 2 3 (function() { ... some statements })() function hoist: function declaration will elevate to top 1 2 sum(3,5); // This is OK! function sum(a, b) { return a + b; }; expression function declaration won\u0026rsquo;t 1 2 sum(3,5); // Error var sum = function(a, b) { return a + b; } Variable Scope if no var, global variable\nif var, function scope.\nif same variable name use var multiple time, later ones will be assignment\nlet use block scope, can\u0026rsquo;t re-declare in one scope, no elevate\nconst =\u0026gt; read-only variable\nDOM Manipulations select DOM node/element. If DOM contain: 1 2 \u0026lt;div id=\u0026#34;target\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;a-class\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; unique DOM node document.getElementByID('target') array of DOM node document.getElementByClassName('a-class') CSS selector document.querySelector(): With a querySelector statement, you can select an element based on a CSS selector. This means you can select elements by ID, class, or any other type of selector. document.querySelector(#myid);: select by ID document.querySelector(.myclass);: select by CSS class name document.querySelector(\u0026quot;p.example\u0026quot;);: Get the first element in the document with class=\u0026ldquo;example\u0026rdquo; document.querySelectorAll(): a list of the document\u0026rsquo;s elements that match the specified group of selectors. Browse node parentNode.children parentNode.firstElementChild parentNode.lastElementChild parentNode.childElementCount Add/Remove node document.createElement(“div”); newText = document.createTextNode(“Hello!”); parentNode.appendChild(childNode); parentNode.removeChild(childNode); parentNode.removeChild(childNode); parentNode.replaceChild(newNode, oldNode) Modify node thisElement.style.color = “red”; // Modify CSS style thisElement.className = “new-class1 new-class2”; // Modify properties thisElement.classList.add(className); thisElement.classList.remove(className) Bind Event addEventListener(). eventType: click focus: start to input blur: leave the input change: value change keydown keyup mouseenter mouseleave e.g. 1 2 \u0026lt;!-- in .html --\u0026gt; \u0026lt;button id=“target\u0026#34;\u0026gt;This is a button\u0026lt;/button\u0026gt; 1 2 3 4 5 var targetElement = document.getElementById(\u0026#34;target\u0026#34;); targetElement.addEventListener( \u0026#34;click\u0026#34;, function() { // Do something you wnat alert(\u0026#39;what do you wnat to do?\u0026#39;); }); GlobalEventHandlers() Ref 1 2 3 4 5 let log = document.getElementById(\u0026#39;log\u0026#39;); log.onclick = inputChange; function inputChange(e) { //.. some something here } As a tag attribute Ref 1 \u0026lt;div class=\u0026#34;myClass\u0026#34; onclick=\u0026#34;clickHandler()\u0026#34;\u0026gt; Closer Look at Constructor Function 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // #1 Function call to a ref to an anonymous function var Car = function(make) { this.make=make; } var car = Car(\u0026#34;BMW\u0026#34;); console.log(car); // undefined console.log(car.make); // ERROR // #2 Constructor call to a ref to an anonymous function var Car = function(make) { this.make=make; } var car = new Car(\u0026#34;BMW\u0026#34;); console.log(car); // { make: \u0026#34;BMW\u0026#34; } console.log(car.make); // \u0026#34;BMW\u0026#34; // #3 Ref to a ref to an anonymous function var Car = function(make) { this.make=make; } var car = Car; console.log(car); // is a function console.log(car.make); // undefined // #4 Constructor call to a ref to an anonymous function var Car = function(make) { this.make=make; } var car = new Car; // missing parameter console.log(car); // is an object console.log(car.make); // undefine // #5 Create an object from another object as a prototype var Car = function(make) { this.make=make; } var car = new Car(\u0026#34;BMW\u0026#34;); console.log(car); // { make: \u0026#34;BMW\u0026#34; } console.log(car.make); // \u0026#34;BMW\u0026#34; var myCar = Object.create(car); console.log(myCar); // { } \u0026lt;- no own property console.log(myCar.make);// \u0026#34;BMW\u0026#34; \u0026lt;- inherited property Each object has a private property which holds a link to another object called its prototype.\nObject.keys(obj) vs. for (var i in obj) Object.keys(obj) returns an array with all the own (not in the prototype chain) enumerable properties’ names (“keys”) of the object obj. for (var i in obj) traverses all enumerable properties of an object and its prototype chain. More on function Arrow function (=\u0026gt;): is like lambda in python Syntax: 1 2 3 (arg1, arg2) =\u0026gt; { // function body } if no function body: 1 2 3 (arg1, arg2) =\u0026gt; expression // but if expression is obj definition, () is required arg =\u0026gt; ({property: value}) if arg only 1 1 arg1 =\u0026gt; expression call it on spot 1 (() =\u0026gt; console.log(\u0026#34;hello world!\u0026#34;))() More on Variable \u0026ldquo;const\u0026rdquo; defines “read-only” variables. However, the properties inside a const object are NOT constrain\nIterate through an Array\n1 2 3 var array = [\u0026#39;1\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;3\u0026#39;] for (var i=0; i\u0026lt; array.length; i++) console.log(array(i)); or\n1 array.forEach(i =\u0026gt; console.log(i)) Usefule concept 1 2 3 4 5 6 7 8 var arr = [3, 5, 7]; arr.foo = \u0026#39;hello\u0026#39;; for (var i in arr) { console.log(i); // \u0026#34;0\u0026#34;, \u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;foo\u0026#34; } for (var i of arr) { console.log(i); // 3, 5, 7; NO \u0026#34;hello\u0026#34; } The in operator returns true if the specified property is in the specified object\nTemplate literal\n1 `string text ${expression} string text` instanceof\n","permalink":"https://wesleych3n.github.io/posts/0001-js-road/","summary":"JavaScript Note 5 type Undefined Null String Boolen Number Others r Object 3 way create Object Object literal 1 var a = { name:\u0026#39;Wesley\u0026#39;, score: 100 }; new operator 1 var a = new Date Constructor function 1 2 3 4 5 function Student(name, score){ this.name = name this.score = score } var a = new Student(\u0026#39;Wesley\u0026#39;, 100); Primitive variable assignment makes a \u0026ldquo;copy\u0026rdquo; Object variable assignment pass the \u0026ldquo;reference\u0026rdquo; Function can be anonymous // recommended 1 var add = function(a, b) { return a + b; }; Return a function 1 2 3 4 5 6 7 var f = function(s) { return s?","title":"JavaScript Learning Note"}]